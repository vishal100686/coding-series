import torch
import torch.nn as nn

# Sample text data (encoded)
X = torch.tensor([[1, 2, 3], [2, 3, 4], [1, 5, 6], [4, 5, 6]])
Y = torch.tensor([1, 1, 0, 0])  # 1=Positive, 0=Negative

class Sentiment(nn.Module):
    def __init__(self):
        super().__init__()
        self.embedding = nn.Embedding(7, 4)
        self.fc = nn.Linear(12, 2)

    def forward(self, x):
        x = self.embedding(x).view(x.size(0), -1)
        return self.fc(x)

model = Sentiment()
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

for epoch in range(100):
    output = model(X)
    loss = criterion(output, Y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if epoch % 20 == 0:
        print(f'Epoch {epoch}: Loss={loss.item()}')
