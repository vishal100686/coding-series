import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# Import Dataset
(X_train, y_train), (X_test, y_test) = tf.keras.datasets.mnist.load_data()

# Normalize the data (scale pixel values between 0 and 1)
X_train, X_test = X_train / 255.0, X_test / 255.0  

# Reshape for CNN input (adding a channel dimension)
X_train = X_train.reshape(-1, 28, 28, 1)
X_test = X_test.reshape(-1, 28, 28, 1)

# Build Model
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28,28,1)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile & Train
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))

# Predict on a single image
prediction = model.predict(X_test[:1])  # Predict first test image
predicted_label = np.argmax(prediction)  # Get the highest probability class

# Display the image and predicted label
plt.imshow(X_test[0].reshape(28,28), cmap='gray')
plt.title(f'Predicted Label: {predicted_label}')
plt.show()
