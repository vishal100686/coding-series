import torch
import torch.nn as nn
import numpy as np

# Sample dummy data (sequence of prices)
data = np.linspace(1, 50, 50).reshape(-1, 1).astype(np.float32)
X = torch.tensor(data[:-1]).unsqueeze(0)
Y = torch.tensor(data[1:]).unsqueeze(0)

class LSTMModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.lstm = nn.LSTM(1, 50)
        self.fc = nn.Linear(50, 1)

    def forward(self, x):
        out, _ = self.lstm(x)
        out = self.fc(out)
        return out

model = LSTMModel()
criterion = nn.MSELoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

for epoch in range(300):
    output = model(X)
    loss = criterion(output, Y)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()
    if epoch % 50 == 0:
        print(f'Epoch {epoch}: Loss={loss.item()}')
